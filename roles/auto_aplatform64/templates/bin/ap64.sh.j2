#!/bin/bash
#######################################
# Command line interface for A:Platform64
#
# {{ auto_platform64_managed_file }}
#
# Author: serdigital64 (https://github.com/serdigital64)
# License: GPL-3.0-or-later (https://www.gnu.org/licenses/gpl-3.0.txt)
# Repository: https://github.com/serdigital64/aplatform64
#######################################

# shellcheck disable=SC2034
BL64_LIB_STRICT='0'

# shellcheck disable=SC1091
source '{{ auto_ansible_control_base["paths"]["bin"] + "/bashlib64.bash" }}'
# shellcheck disable=SC1091
source '{{ auto_aplatform64_base["files"]["aplatform64_env"] }}'

function ap64_list_sites() {

  # shellcheck disable=SC2164
  cd "${APLATFORM64_ROOT}/etc/keys"
  bl64_msg_show_text "Available sites:"
  bl64_msg_show_text "$($BL64_OS_ALIAS_LS_FILES)"

}

function ap64_list_plays() {

  local playbook="$1"
  declare -a record
  local catalog="${ANSIBLE_PLAYBOOK_DIR}/catalog.csv"

  if [[ ! -r "${catalog}" ]]; then
    bl64_msg_show_error "unable to read playbook catalog ($catalog)"
    return 1
  fi

  IFS=':'
  while read -r -a record; do
    [[ -n "$playbook" && "$playbook" != ${record[0]} ]] && continue
    printf 'playbook  : %s\n' "${record[0]}"
    printf 'purpose   : %s\n' "${record[3]}"
    printf 'location  : %s\n' "${ANSIBLE_PLAYBOOK_DIR}/${record[0]}.yml"
    printf 'inventory : %s\n' "${APLATFORM64_INVENTORIES}/${record[1]}.ini"
    printf 'host group: %s\n' "${record[2]}"
    printf 'parameters: %s\n\n' "${APLATFORM64_GROUP_VARS}/${record[2]}/"
  done <"${catalog}"
  unset IFS

}

function ap64_run() {

  local playbook="$1"
  local host="$2"
  local output="$3"
  local catalog="${ANSIBLE_PLAYBOOK_DIR}/catalog.csv"
  local inventory_file=''
  local playbook_file=''
  local verbosity=''
  declare -a record

  if [[ -z "$playbook" ]]; then
    bl64_msg_show_error 'playbook not selected. Please specify the playbook name using the "-p Playbook" option. You can also use the "-l" option to show available playbooks.'
    return 1
  fi

  if [[ ! -r "${catalog}" ]]; then
    bl64_msg_show_error "unable to read playbook catalog ($catalog)"
    return 1
  fi

  IFS=':'
  while read -r -a record; do
    if [[ "${record[0]}" == "$playbook" ]]; then
      playbook_file="${ANSIBLE_PLAYBOOK_DIR}/${record[0]}.yml"
      inventory_file="${APLATFORM64_INVENTORIES}/${record[1]}.ini"
      break
    fi
  done <"${catalog}"
  unset IFS

  if [[ -z "$playbook_file" || ! -r "$playbook_file" ]]; then
    bl64_msg_show_error "playbook not found ($playbook_file). Check the playbook name by using the option option -l"
    return 1
  fi

  if [[ -z "$inventory_file" || ! -r "$inventory_file" ]]; then
    bl64_msg_show_error "inventory not found ($inventory_file). Recreate it by using the option -r"
    return 1
  fi

  if [[ "$host" != 'all' ]]; then
    host="--limit $host"
  else
    host=''
  fi

  if [[ "$output" == '1' ]]; then
    verbosity='--diff'
    export ANSIBLE_STDOUT_CALLBACK='community.general.unixy'
  elif [[ "$output" == '2' ]]; then
    ANSIBLE_CONFIG="$ANSIBLE_CONFIG_DEBUG"
    verbosity='-v --diff'
  fi

  "$APLATFORM64_CMD_ANSIBLE_PLAYBOOK" \
    -i "$inventory_file" \
    $host \
    $verbosity \
    "$playbook_file"

}

function ap64_refresh() {

  local output="$1"
  local verbosity=''

  if [[ "$output" == '1' ]]; then
    verbosity='--diff'
    export ANSIBLE_STDOUT_CALLBACK='community.general.unixy'
  elif [[ "$output" == '2' ]]; then
    ANSIBLE_CONFIG="$ANSIBLE_CONFIG_DEBUG"
    verbosity='-v --diff'
  fi

  "$APLATFORM64_CMD_ANSIBLE_PLAYBOOK" \
    $verbosity \
    -i "${APLATFORM64_INVENTORIES}/ansible_service.ini" \
    "${ANSIBLE_PLAYBOOK_DIR}/manage_ansible_control_nodes.yml"

}

function ap64_create() {

  local site="$1"
  local output="$2"
  local verbosity=''

  if [[ -z "$site" ]]; then
    bl64_msg_show_error 'site not selected. Please specify the new site name using the "-s Site" option'
    return 1
  fi

  if [[ "$output" == '1' ]]; then
    verbosity='--diff'
    export ANSIBLE_STDOUT_CALLBACK='community.general.unixy'
  elif [[ "$output" == '2' ]]; then
    ANSIBLE_CONFIG="$ANSIBLE_CONFIG_DEBUG"
    verbosity='-v --diff'
  fi

  "$APLATFORM64_CMD_ANSIBLE_PLAYBOOK" \
    $verbosity \
    -i "${APLATFORM64_INVENTORIES}/ansible_service.ini" \
    -e "{\"auto_ansible_control_site\":\"$site\"}" \
    -e '{"auto_ansible_control_managed":[]}' \
    "${ANSIBLE_PLAYBOOK_DIR}/manage_ansible_control_nodes.yml"

}

function ap64_remove() {

  local site="$1"
  local target=''
  local path=''

  if [[ -z "$site" ]]; then
    bl64_msg_show_error 'site not selected. Please specify the new site name using the "-s Site" option'
    return 1
  fi

  targets='{{
    auto_ansible_control_base['paths']['bin'] + ' ' +
    auto_ansible_control_base['paths']['docs'] + ' ' +
    auto_ansible_control_base['paths']['inventories'] + ' ' +
    auto_ansible_control_base['paths']['files'] + ' ' +
    auto_ansible_control_base['paths']['files_groups'] + ' ' +
    auto_ansible_control_base['paths']['playbooks'] + ' ' +
    auto_ansible_control_base['paths']['tests'] + ' ' +
    auto_ansible_control_base['paths']['roles'] + ' ' +
    auto_ansible_control_base['paths']['etc_cfg'] + ' ' +
    auto_ansible_control_base['paths']['etc_keys'] + ' ' +
    auto_ansible_control_base['paths']['etc_groups'] + ' ' +
    auto_ansible_control_base['paths']['vars'] + ' ' +
    auto_ansible_control_base['paths']['var_groups'] + ' ' +
    auto_ansible_control_base['paths']['templates'] + ' ' +
    auto_ansible_control_base['paths']['logs'] + ' ' +
    auto_ansible_control_base['paths']['tmp'] + ' ' +
    auto_ansible_control_base['paths']['cache'] + ' ' +
    auto_ansible_control_base['paths']['persistence']
  }}'

  for path in $targets; do
    if [[ -d "${path}/${site}" ]]; then
      bl64_os_rm_full "${path}/${site}"
    fi
  done
  :

}

function ap64_upgrade() {

  local collections="$1"

  local collection=''

  if [[ "$collections" == 'all' ]]; then
    collections="$(
      cd ${ANSIBLE_COLLECTIONS_PATHS}/ansible_collections/serdigital64
      echo *
    )"
  fi

  # shellcheck disable=SC2164
  for collection in $collections; do
    bl64_msg_show_task "upgrade collection: $collection"
    "$APLATFORM64_CMD_ANSIBLE_GALAXY" 'collection' 'install' "serdigital64.${collection}" '--upgrade'
  done

}

function ap64_check() {

  bl64_msg_show_task 'check requirements'
  [[ ! -r "${APLATFORM64_BIN}/site/ansible_control.env" ]] &&
    bl64_msg_show_error "default site not configured" && return 1

  return 0

}

function ap64_help() {

  bl64_msg_show_usage \
    '<-c|-o|-r|-u|-l|-n|-t> [-v|-d] [-s Site] [-x Host] [-p Playbook] [-e Collection] [-h]' \
    'A:Platform64 command line interface' '
  -c           : Create a A:Platform64 site
  -o           : Remove a A:Platform64 site
  -r           : Refresh A:Platform64 site configuration by rerunning the setup process
  -u           : Upgrade A:Platform64 Ansible collections to the latest version in Ansible Galaxy
  -l           : List available playbooks
  -n           : Run playbook
  -t           : List sites
  -h           : Show usage info
    ' '
  -d           : Show debugging information on ansible-playbook run
  -v           : Show end-state pre/post diff on ansible-playbook run
    ' '
  -s Site      : Target Site. Defaul: site
  -x Host      : Target host for playbook run. Default: all
  -p Playbook  : Name of the playbook to run
  -e Collection: Collection name for the upgrade option (-u). Default: all
  '

  return 0

}

#
# Main
#

declare ap64_status=0
declare ap64_command=''
declare ap64_command_tag=''
declare ap64_site=''
declare ap64_playbook=''
declare ap64_change_site='0'
declare ap64_output='0'
declare ap64_collection='all'
declare ap64_host='all'

(($# == 0)) && ap64_help && exit 1
while getopts ':corulntvds:p:x:e:h' Option; do
  case "$Option" in
  n)
    ap64_command='ap64_run'
    ap64_command_tag='run-playbook'
    ;;
  o)
    ap64_command='ap64_remove'
    ap64_command_tag='remove-site'
    ;;
  t)
    ap64_command='ap64_list_sites'
    ap64_command_tag='list-sites'
    ;;
  l)
    ap64_command='ap64_list_plays'
    ap64_command_tag='list-playbooks'
    ;;
  c)
    ap64_command='ap64_create'
    ap64_command_tag='create-site'
    ;;
  r)
    ap64_command='ap64_refresh'
    ap64_command_tag='refresh-site'
    ;;
  u)
    ap64_command='ap64_upgrade'
    ap64_command_tag='upgrade-collections'
    ;;
  v) ap64_output='1' ;;
  d) ap64_output='2' ;;
  s) ap64_site="$OPTARG" ;;
  x) ap64_host="$OPTARG" ;;
  p) ap64_playbook="$OPTARG" ;;
  e) ap64_collection="$OPTARG" ;;
  h) ap64_help && exit ;;
  \?) ap64_help && exit 1 ;;
  esac
done
[[ -z "$ap64_command" ]] && ap64_help && exit 1
ap64_check || exit 1
PATH="${APLATFORM64_MANAGER_BIN}:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

#
# Setup Python Virtual Environment
#

if [[ "$ap64_command" != 'ap64_list_plays' && "$ap64_command" != 'ap64_list_sites' ]]; then
  if [[ -z "$VIRTUALENVWRAPPER_ENV_BIN_DIR" ]]; then
    [[ ! -x "$APLATFORM64_CMD_VEW_LOADER" ]] &&
      bl64_msg_show_error "python virtual environment for Ansible not found ($APLATFORM64_CMD_VEW_LOADER)" && return 1

    bl64_msg_show_task "load Python virtual environment wrapper ($APLATFORM64_CMD_VEW_LOADER)"
    # shellcheck disable=SC1090
    source "$APLATFORM64_CMD_VEW_LOADER"
  fi

  if [[ -z "$VIRTUAL_ENV" ]]; then
    bl64_msg_show_task "set Python virtual environment to: $APLATFORM64_VENVIRONMENT"
    workon "$APLATFORM64_VENVIRONMENT"
  fi

  if [[ ! -x "$APLATFORM64_CMD_ANSIBLE_GALAXY" ]]; then
    bl64_msg_show_error 'unable to initialize the Python virtual environment for Ansible'
    exit 1
  fi
  PATH="${APLATFORM64_VEW_BIN}:${APLATFORM64_MANAGER_BIN}:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
fi

#
# Load site environment
#

if [[ "$ap64_command" == 'ap64_create' ]]; then
  APLATFORM64_SITE='site'
  ap64_change_site='1'
elif [[ -z "$APLATFORM64_SITE" ]]; then
  APLATFORM64_SITE="${ap64_site:-site}"
  ap64_change_site='1'
elif [[ "$APLATFORM64_SITE" != "${ap64_site:-site}" ]]; then
  APLATFORM64_SITE="${ap64_site:-site}"
  ap64_change_site='1'
fi
if [[ "$ap64_change_site" == '1' ]]; then

  bl64_msg_show_task "change current site to: $APLATFORM64_SITE"
  # shellcheck disable=SC1090
  source "$APLATFORM64_BIN/$APLATFORM64_SITE/ansible_control.env"

  if [[ "$ANSIBLE_CONFIG" != "$APLATFORM64_ROOT/etc/cfg/$APLATFORM64_SITE/ansible.cfg" ]]; then
    bl64_msg_show_error "unable to initialize the Ansible Control shell environment for the site ($APLATFORM64_SITE)"
    exit 1
  fi

fi

bl64_msg_show_batch_start "$ap64_command_tag"
case "$ap64_command" in
'ap64_upgrade') "$ap64_command" "$ap64_collection" ;;
'ap64_list_sites') "$ap64_command" ;;
'ap64_refresh') "$ap64_command" "$ap64_output" ;;
'ap64_create') "$ap64_command" "$ap64_site" "$ap64_output" ;;
'ap64_remove') "$ap64_command" "$ap64_site" ;;
'ap64_run') "$ap64_command" "$ap64_playbook" "$ap64_host" "$ap64_output" ;;
'ap64_list_plays') "$ap64_command" "$ap64_playbook" ;;
esac
ap64_status=$?

bl64_msg_show_batch_finish $ap64_status "$ap64_command_tag"
exit $ap64_status
