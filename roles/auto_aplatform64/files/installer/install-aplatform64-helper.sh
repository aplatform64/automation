#!/bin/bash
#######################################
#
# Helper for the Bootstrap A:Platform64 Environment script (install-aplatform64)
#
# Project GIT repository: [https://github.com/serdigital64/aplatform64](https://github.com/serdigital64/aplatform64)
# Project Ansible Galaxy repository: [https://galaxy.ansible.com/serdigital64](https://galaxy.ansible.com/serdigital64)
# Project Documentation: [https://aplatform64.readthedocs.io](https://aplatform64.readthedocs.io)
#
# Author: [SerDigital64](https://serdigital64.github.io/)
# License: [GPL-3.0-or-later](https://www.gnu.org/licenses/gpl-3.0.txt)
#
#######################################

# shellcheck disable=SC2034
BL64_LIB_STRICT='0'
# shellcheck disable=SC1091
source "${APLATFORM64_PATH_BIN}/bashlib64.bash"

function UpdateSudoers {

  bl64_sudo_add_root "$APLATFORM64_USR_CONTROL_NAME"

}

function InstallAnsible {

  export ANSIBLE_COLLECTIONS_PATHS="$APLATFORM64_PATH_COLLECTIONS"
  export ANSIBLE_ROLES_PATH="$APLATFORM64_PATH_ROLES"
  export ANSIBLE_GALAXY_CACHE_DIR="$APLATFORM64_PATH_CACHE_GALAXY"
  export VIRTUALENVWRAPPER_PYTHON="$APLATFORM64_CMD_PYTHON3"
  export VIRTUALENVWRAPPER_VIRTUALENV="$APLATFORM64_CMD_VE"
  export WORKON_HOME="$APLATFORM64_PATH_WORKON"
  export PIP_DOWNLOAD_CACHE="$APLATFORM64_PATH_CACHE_PIP"
  local AnsibleCLI="${WORKON_HOME}/${APLATFORM64_VENVIRONMENT}/bin/ansible"

  PATH="${APLATFORM64_USR_CONTROL_HOME}/.local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

  if [[ -x "$AnsibleCLI" ]]; then
    bl64_msg_show_warning "Ansible already installed ($AnsibleCLI)"
    return 0
  fi

  if [[ ! -r "$APLATFORM64_CMD_VEW" ]]; then
    bl64_msg_show_error "VEW not found ($APLATFORM64_CMD_VEW). Please install it and try again"
    return 1
  fi

  # shellcheck disable=SC1090
  source "$APLATFORM64_CMD_VEW"

  mkvirtualenv \
    -p "${APLATFORM64_CMD_PYTHON3_BASENAME}" \
    "$APLATFORM64_VENVIRONMENT" &&
    workon "$APLATFORM64_VENVIRONMENT"
  [[ ! -d "${WORKON_HOME}/${APLATFORM64_VENVIRONMENT}" ]] && return 1

  pip3 \
    --cache-dir="$APLATFORM64_PATH_CACHE_PIP" \
    install \
    'ansible'

  [[ ! -x "$AnsibleCLI" ]] && return 1
  return 0

}

function InstallAPlatform64 {

  local Status=0
  local AnsibleGalaxy=''
  local Module=''
  export ANSIBLE_COLLECTIONS_PATHS="$APLATFORM64_PATH_COLLECTIONS"
  export ANSIBLE_ROLES_PATH="$APLATFORM64_PATH_ROLES"
  export ANSIBLE_GALAXY_CACHE_DIR="$APLATFORM64_PATH_CACHE_GALAXY"
  export ANSIBLE_PYTHON_INTERPRETER="${APLATFORM64_PATH_WORKON}/${APLATFORM64_VENVIRONMENT}/bin/${APLATFORM64_CMD_PYTHON3_BASENAME}"

  export VIRTUALENVWRAPPER_PYTHON="$APLATFORM64_CMD_PYTHON3"
  export VIRTUALENVWRAPPER_VIRTUALENV="$APLATFORM64_CMD_VE"
  export WORKON_HOME="$APLATFORM64_PATH_WORKON"
  PATH="${APLATFORM64_USR_CONTROL_HOME}/.local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

  if [[ -r "${APLATFORM64_PATH_ROOT}/inventories/${APLATFORM64_SITE}/group_vars/all/auto_aplatform64.yml" ]]; then
    bl64_msg_show_warning "A:Platform64 already installed (${APLATFORM64_PATH_ROOT})"
    return 0
  fi

  if [[ -n "$APLATFORM64_PATH_REGISTRY" ]]; then
    bl64_check_directory "$APLATFORM64_PATH_REGISTRY" || return 1
  fi

  if [[ ! -r "$APLATFORM64_CMD_VEW" ]]; then
    bl64_msg_show_error "VEW not found ($APLATFORM64_CMD_VEW). Please install it and try again"
    return 1
  fi

  # shellcheck disable=SC1090
  source "$APLATFORM64_CMD_VEW"
  workon "$APLATFORM64_VENVIRONMENT" || return 1

  AnsibleGalaxy="$VIRTUAL_ENV/bin/ansible-galaxy"
  if [[ ! -x "$AnsibleGalaxy" ]]; then
    bl64_msg_show_error "Command ansible-galaxy not found ($AnsibleGalaxy). Please install Ansible in VEW and try again"
    return 1
  fi

  "$BL64_OS_CMD_CAT" >"$APLATFORM64_PATH_INSTALLER_OPTIONS" <<-EEOF
---
# Warning: This file is automatically generated by the A:Platform64 installer. Do not modify."
auto_aplatform64_installer_ve_loader: "$APLATFORM64_CMD_VE"
auto_aplatform64_installer_vew_loader: "$APLATFORM64_CMD_VEW"
auto_aplatform64_installer_vew_home: "$APLATFORM64_PATH_WORKON"
auto_aplatform64_installer_vew_space: "$APLATFORM64_VENVIRONMENT"
auto_aplatform64_installer_pip_cache: "$APLATFORM64_PATH_CACHE_PIP"
auto_aplatform64_installer_python_system: "$APLATFORM64_CMD_PYTHON3"
auto_aplatform64_installer_python_user: "${APLATFORM64_PATH_WORKON}/${APLATFORM64_VENVIRONMENT}/bin/${APLATFORM64_CMD_PYTHON3_BASENAME}"
auto_aplatform64_installer_user_name: "$APLATFORM64_USR_CONTROL_NAME"
auto_aplatform64_installer_user_group: "$APLATFORM64_USR_CONTROL_GROUP"
auto_aplatform64_installer_user_home: "$APLATFORM64_USR_CONTROL_HOME"
auto_aplatform64_installer_root: "$APLATFORM64_PATH_ROOT"
auto_aplatform64_installer_var: "$APLATFORM64_PATH_VAR"
auto_aplatform64_installer_site: "$APLATFORM64_SITE"
...
EEOF

  for Module in $APLATFORM64_MODULES; do
    if [[ -n "$APLATFORM64_PATH_REGISTRY" ]]; then
      Module="${APLATFORM64_PATH_REGISTRY}/serdigital64-${Module}.tar.gz"
    else
      Module="serdigital64.${Module}"
    fi
    ansible-galaxy collection install "$Module" --upgrade --force || return 1
  done

  if [[ $APLATFORM64_BECOME == 1 ]]; then
    ansible-playbook \
      --ask-become-pass \
      "$APLATFORM64_PATH_INSTALLER_YML"
    Status=$?
  else
    ansible-playbook \
      "$APLATFORM64_PATH_INSTALLER_YML"
    Status=$?
  fi

  return $Status

}

function InstallVEW {

  export HOME="${APLATFORM64_USR_CONTROL_HOME}"
  export XDG_CONFIG_HOME="${APLATFORM64_USR_CONTROL_HOME}/.config"
  export XDG_CACHE_HOME="${APLATFORM64_USR_CONTROL_HOME}/.cache"
  export VIRTUALENVWRAPPER_PYTHON="$APLATFORM64_CMD_PYTHON3"
  export VIRTUALENVWRAPPER_VIRTUALENV="$APLATFORM64_CMD_VE"
  export WORKON_HOME="$APLATFORM64_PATH_WORKON"
  export PIP_DOWNLOAD_CACHE="$APLATFORM64_PATH_CACHE_PIP"

  local PreModules='pip setuptools wheel stevedore'
  local Modules='virtualenvwrapper virtualenv-clone virtualenv'
  PATH="${APLATFORM64_USR_CONTROL_HOME}/.local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

  if [[ -r "$APLATFORM64_CMD_VEW" ]]; then
    bl64_msg_show_warning "VEW already installed ($APLATFORM64_CMD_VEW)"
    return 0
  fi

  if [[ ! -x "$APLATFORM64_CMD_PYTHON3" ]]; then
    bl64_msg_show_error "Python3 not found ($APLATFORM64_CMD_PYTHON3). Please install it and try again"
    return 1
  fi

  # shellcheck disable=SC2086
  "$APLATFORM64_CMD_PYTHON3" -m pip \
    install \
    --upgrade \
    --user \
    $PreModules &&
    "$APLATFORM64_CMD_PYTHON3" -m pip \
      install \
      --upgrade \
      --user \
      $Modules

  [[ ! -r "$APLATFORM64_CMD_VEW" ]] && return 1
  # shellcheck disable=SC1090
  source "$APLATFORM64_CMD_VEW"

  return 0

}

#
# Main
#

declare Status=1
bl64_msg_setup "$BL64_MSG_FORMAT_CALLER"

if [[ "$1" == 'vew' ]]; then
  InstallVEW
  Status=$?
elif [[ "$1" == 'ansible' ]]; then
  InstallAnsible
  Status=$?
elif [[ "$1" == 'aplatform64' ]]; then
  InstallAPlatform64
  Status=$?
elif [[ "$1" == 'sudoers' ]]; then
  UpdateSudoers
  Status=$?
fi

exit $Status
